name: Acceptance Test cases
on:
  pull_request:
  repository_dispatch:
    types: [ok-to-test-command]
jobs:
  Acceptance-Tests:
    runs-on: self-hosted
    if: github.event_name == 'repository_dispatch'
    steps:
      - run: echo "üéâ The job was automatically triggered by a ${{ github.event_name }} event."
      - run: echo "üêß This job is now running on a ${{ runner.os }} server hosted by GitHub!"
      - run: echo "üîé The name of your branch is ${{ github.ref }} and your repository is ${{ github.repository }}."
      - name: Check out repository code
        uses: actions/checkout@v4
        with:
          ref: 'refs/pull/${{ github.event.client_payload.pull_request.number }}/merge'

      - name: Remove Cached Go Versions
        run: |
          sudo rm -rf /home/ubuntu/actions-runner/_work/_tool/go
          sudo rm -rf /usr/local/go
          sudo apt remove --purge golang -y
          hash -r  # Clear shell path cache

      - name: Set up Go
        uses: actions/setup-go@v5
        with:
          go-version: '1.20'
          check-latest: true  # Ensures the latest patch of Go 1.20 is installed
          cache: true  # Enables module caching

      - name: Verify Go Installation
        run: |
          go version
          which go

      - name: Set Go Environment
        run: |
          echo "GOPATH=$HOME/go" >> $GITHUB_ENV
          echo "PATH=$HOME/go/bin:$PATH" >> $GITHUB_ENV

      - name: Cache Go Modules
        uses: actions/cache@v3
        with:
          path: |
            ~/go/pkg/mod
          key: go-mod-${{ runner.os }}-${{ hashFiles('**/go.sum') }}
          restore-keys: |
            go-mod-${{ runner.os }}-

      - name: Install Dependencies
        run: |
          go mod tidy
          go mod vendor

      - name: Install unzip and sshpass
        run: |
          sudo apt-get update && sudo apt-get install -y unzip sshpass

      - name: Setup Terraform v1.10.5
        run: |
          set -e  # Exit on error
          TERRAFORM_VERSION="1.10.5"
          curl -fsSL -o terraform.zip "https://releases.hashicorp.com/terraform/${TERRAFORM_VERSION}/terraform_${TERRAFORM_VERSION}_linux_amd64.zip"
          
          if [ ! -f terraform.zip ]; then
            echo "Terraform zip file not found!"
            exit 1
          fi

          unzip terraform.zip
          sudo mv terraform /usr/local/bin/
          rm terraform.zip  # Cleanup

          echo "‚úÖ Terraform Installed Successfully!"
          terraform version

      - name: Set environment variables
        run: |
            echo "NUTANIX_PE_PASSWORD=${{ secrets.NUTANIX_PE_PASSWORD }}" >> $GITHUB_ENV
            echo "NUTANIX_PE_USERNAME=${{ secrets.NUTANIX_PE_USERNAME }}" >> $GITHUB_ENV
            echo "NUTANIX_USERNAME=${{ secrets.NUTANIX_USERNAME }}" >> $GITHUB_ENV
            echo "NUTANIX_PASSWORD=${{ secrets.NUTANIX_PASSWORD }}" >> $GITHUB_ENV
            echo "NUTANIX_INSECURE=${{ secrets.NUTANIX_INSECURE }}" >> $GITHUB_ENV
            echo "NUTANIX_PORT=${{ secrets.NUTANIX_PORT }}" >> $GITHUB_ENV
            echo "NUTANIX_ENDPOINT=${{ secrets.NUTANIX_ENDPOINT }}" >> $GITHUB_ENV
            echo "NUTANIX_STORAGE_CONTAINER=${{ secrets.NUTANIX_STORAGE_CONTAINER }}" >> $GITHUB_ENV
            echo "FOUNDATION_ENDPOINT=${{ secrets.FOUNDATION_ENDPOINT }}" >> $GITHUB_ENV
            echo "FOUNDATION_PORT=${{ secrets.FOUNDATION_PORT }}" >> $GITHUB_ENV
            echo "NOS_IMAGE_TEST_URL=${{ secrets.NOS_IMAGE_TEST_URL }}" >> $GITHUB_ENV
            echo "NDB_ENDPOINT=${{ secrets.NDB_ENDPOINT }}" >> $GITHUB_ENV
            echo "NDB_PASSWORD=${{ secrets.NDB_PASSWORD }}" >> $GITHUB_ENV
            echo "NDB_USERNAME=${{ secrets.NDB_USERNAME }}" >> $GITHUB_ENV
            echo "PROTECTION_RULES_TEST_FLAG=${{ secrets.PROTECTION_RULES_TEST_FLAG }}" >> $GITHUB_ENV
            echo "CGO_ENABLED=${{ secrets.CGO_ENABLED }}" >> $GITHUB_ENV
            echo "REACTION_TYPE=hooray" >> $GITHUB_ENV  # Reaction for success
      - name: Check gofmt
        run: |
            echo "==> Checking that code complies with gofmt requirements..."
            gofmt_files=$(gofmt -l `find . -name '*.go' | grep -v vendor`)
            if [[ -n ${gofmt_files} ]]; then
                echo 'gofmt needs running on the following files:'
                echo "${gofmt_files}"
                echo "You can use the command: \`make fmt\` to reformat code."
                echo "REACTION_TYPE=confused" >> $GITHUB_ENV
                exit 1
            else
                echo "No gofmt issues found."
            fi
        continue-on-error: true

      - name: Acceptance test cases
        run: |
              args="${{ github.event.client_payload.slash_command.args }}"
              providers=(${args})
              index=0
              n=${#providers[@]}
              runFlag=""
              for provider in $args
              do 
                  if [ "$provider" = "foundation" ]
                      then 
                          runFlag+="TestAccFoundation*"
                  elif [ "$provider" = "foundation_central" ]
                      then
                          runFlag+="TestAccFC*"
                  elif [ "$provider" = "karbon" ]
                      then
                          runFlag+="TestAccKarbon*"
                  elif [ "$provider" = "v3" ]
                      then
                          runFlag+="TestAccNutanix*"
                  elif [ "$provider" = "v4" ]
                      then
                          runFlag+="TestAccV2Nutanix*"
                  elif [ "$provider" = "lcm" ]
                      then
                          runFlag+="TestAccV2NutanixLcm*"
                  elif [ "$provider" = "era" ]
                      then
                          runFlag+="TestAccEra*"
                  else
                      echo "running individual testcase/package"
                      runFlag+="$provider"
                  fi
                  if [ $index -lt $((n-1)) ]
                      then
                          runFlag+="|"
                  fi
                  index=$((index+1))
              done
              export TESTARGS="-run=${runFlag}"
              echo "TESTARGS = $TESTARGS"
              echo "==> Setup Foundation Config"
              echo '${{ secrets.FOUNDATION_CONFIG }}' > test_foundation_config.json
              echo "==> Setup PC Config"
              echo '${{ secrets.PC_CONFIG }}' > test_config.json
              echo "==> Setup V4 Config"
              echo '${{ secrets.V4_CONFIG }}' > test_config_v2.json
              echo "==> Running testcases..."
              TF_LOG="ERROR" TF_ACC=1 go test ./... -v ${TESTARGS} -timeout 500m -coverprofile c.out -covermode=count | tee test_output.log

              # Ensure test output exists
              if [ ! -f test_output.log ]; then
                  echo "No test output found!"
                  echo "REACTION_TYPE=confused" >> $GITHUB_ENV
                  exit 1
              fi

              # Extract total test cases executed
              TOTAL_RUN=$(grep -c '^=== RUN' test_output.log)
              TOTAL_PASSED=$(grep -c '^--- PASS' test_output.log)
              TOTAL_FAILED=$(grep -c '^--- FAIL' test_output.log)
              TOTAL_SKIPPED=$(grep -c '^--- SKIP' test_output.log)

              # Calculate percentages
              if [ "$TOTAL_RUN" -gt 0 ]; then
                  PASS_PERCENT=$((TOTAL_PASSED * 100 / TOTAL_RUN))
                  FAIL_PERCENT=$((TOTAL_FAILED * 100 / TOTAL_RUN))
                  SKIP_PERCENT=$((TOTAL_SKIPPED * 100 / TOTAL_RUN))
              else
                  PASS_PERCENT=0
                  FAIL_PERCENT=0
                  SKIP_PERCENT=0
              fi

              echo "==================================================üß™ TEST SUMMARY üß™================================================================================="
              echo "Total Test Cases Run üêπüöÄ: $TOTAL_RUN"
              echo "Total Test Cases Passed üêπ‚úÖ: $TOTAL_PASSED ($PASS_PERCENT %)" 
              echo "Total Test Cases Failed üêπ‚ùå: $TOTAL_FAILED ($FAIL_PERCENT %)"
              echo "Total Test Cases Skipped üêπ‚ö†Ô∏è: $TOTAL_SKIPPED ($SKIP_PERCENT %)"
              echo "=================================================================================================================================================="
              echo "================================================== TESTS SUCCEEDED ‚úÖ ============================================================================="
              # Process passed test cases
              if [ "$TOTAL_PASSED" -gt 0 ]; then
                  echo ""
                  grep '^--- PASS' test_output.log | awk '{print "‚úÖ " $3}'
              fi
              echo "==================================================================================================================================================="
              echo "================================================== TESTS FAILED ‚ùå ================================================================================"
              # Process failed test cases
              if [ "$TOTAL_FAILED" -gt 0 ]; then
                  echo ""
                  grep '^--- FAIL' test_output.log | awk '{print "‚ùå " $3}'
              fi
              echo "==================================================================================================================================================="
              echo "================================================== TESTS SKIPPED ‚ö†Ô∏è =============================================================================="
              if [ "$TOTAL_SKIPPED" -gt 0 ]; then
                 awk '
                   /^=== RUN/ { testname=$3; reason="No reason provided" }
                   /--- SKIP/ { print "‚ö†Ô∏è " testname "   : Reason: ‚û°Ô∏è :  " reason }
                  /^[[:space:]]+/ { reason=$0 }' test_output.log
              fi
              echo "==================================================================================================================================================="
              # Process failures
              if [ "$TOTAL_FAILED" -gt 0 ]; then
                  echo ""
                  echo "================== FAILURE DETAILS OF TESTCASES EXECUTED ==============================================================================================="

                  # Extract all test case names that ran
                  grep '^=== RUN' test_output.log | awk '{print $3}' | while read -r test; do
                      if grep -q "^--- FAIL: $test" test_output.log; then
                          echo "TESTCASE: $test"
                          echo "========================================üî•üî•üî•üî•üìù TRACEBACK üìùüî•üî•üî•üî• ======================================================================================="
                          # Extract logs between `=== RUN` and `--- FAIL`
                          awk "/=== RUN   $test/,/--- FAIL: $test/" test_output.log | sed 's/^/    /'

                          echo "==========================================================================================================================================================="
                      fi
                  done
              fi

              # Set exit code
              if [ "$TOTAL_FAILED" -gt 0 ]; then
                  echo "Test Cases Failed!"
                  echo "REACTION_TYPE=confused" >> $GITHUB_ENV
                  exit 1
              else
                  exit 0
              fi

      - name: Code Coverage Check
        if: ${{ always() }}
        run:  |
              echo "Code coverage: Checking if code coverage is above threshold..."
              export TESTCOV_THRESHOLD=50
              echo "Threshold: $TESTCOV_THRESHOLD %"
              totalCoverage=`go tool cover -func=c.out | grep total | grep -Eo '[0-9]+\.[0-9]+'`
              echo "Current test coverage : $totalCoverage %"
              if (( $(echo "$totalCoverage $TESTCOV_THRESHOLD" | awk '{print ($1 > $2)}') )); then
                  echo "CODE_COVERAGE_OUTPUT=Line code coverage is $totalCoverage" >> $GITHUB_ENV
                  echo "Line coverage is $totalCoverage"
              else
                  echo "CODE_COVERAGE_OUTPUT=Current line coverage ($totalCoverage) is below threshold ($TESTCOV_THRESHOLD). Kindly add more acceptance tests." >> $GITHUB_ENV
                  echo "Current coverage ($totalCoverage) is below threshold ($TESTCOV_THRESHOLD)."
              fi

      # Update the comment back
      - name: Update comment
        uses: peter-evans/create-or-update-comment@v1
        if: ${{ always() }}
        with:
          comment-id: ${{ github.event.client_payload.github.payload.comment.id }}
          body: |
            > Run status: ${{ job.status }}
            > [View GitHub Actions Run](https://github.com/${{ github.repository }}/actions/runs/${{ github.run_id }}) üîó
            > ${{ env.CODE_COVERAGE_OUTPUT }}
          reaction-type: ${{ env.REACTION_TYPE }}

      # Update check run for Acceptance Test
      - uses: actions/github-script@v5
        id: update-check-run
        if: ${{ always() }}
        env:
          number: ${{ github.event.client_payload.pull_request.number }}
          job: ${{ github.job }}
          # Conveniently, job.status maps to https://developer.github.com/v3/checks/runs/#update-a-check-run
          conclusion: ${{ job.status }} 
        with:
          github-token: ${{ secrets.GITHUB_TOKEN }}
          script: |
            const { data: pull } = await github.rest.pulls.get({
              ...context.repo,
              pull_number: process.env.number
            });
            const ref = pull.head.sha;
            const { data: checks } = await github.rest.checks.listForRef({
              ...context.repo,
              ref
            });
            const check = checks.check_runs.filter(c => c.name === process.env.job);
            if (check.length == 0) {
              return "Check is not present, ignoring this step."
            }
            const { data: result } = await github.rest.checks.update({
              ...context.repo,
              check_run_id: check[0].id,
              status: 'completed',
              conclusion: process.env.conclusion
            });
            return result;
      
      - run: echo "Build Done!!"
      - run: echo "üçè This job's status is ${{ job.status }}."
