name: Acceptance Test cases
on:
  pull_request:
  repository_dispatch:
    types: [ok-to-test-command]

jobs:
  Acceptance-Tests:
    runs-on: self-hosted
    if: github.event_name == 'repository_dispatch'
    steps:
      - name: Context info
        run: |
          echo "üéâ Triggered by ${{ github.event_name }}"
          echo "üîé Branch = ${{ github.ref }}, Repo = ${{ github.repository }}"

      - name: Check out repository
        uses: actions/checkout@v4
        with:
          ref: refs/pull/${{ github.event.client_payload.pull_request.number }}/merge

      - name: Create custom check run
        id: create-check
        uses: actions/github-script@v5
        with:
          github-token: ${{ secrets.GITHUB_TOKEN }}
          script: |
            const core = require('@actions/core');
            const { data: pull } = await github.rest.pulls.get({
              ...context.repo,
              pull_number: ${{ github.event.client_payload.pull_request.number }}
            });
            const { data: check } = await github.rest.checks.create({
              ...context.repo,
              name: 'Acceptance-Tests',
              head_sha: pull.head.sha,
              status: 'in_progress',
              output: {
                title: 'Acceptance Tests Started',
                summary: 'Running acceptance tests‚Ä¶'
              }
            });
            core.setOutput('check_run_id', check.id);

      # ‚Ä¶ your Go, Terraform, ENV-setup, gofmt steps here ‚Ä¶

      - name: Run acceptance tests
        run: |
          # (your long go test command with -coverprofile=c.out > test_output.log)
          TF_ACC=1 go test ./... -v -timeout 500m -coverprofile=c.out | tee test_output.log

      - name: Code Coverage Check
        if: ${{ always() }}
        run: |
          TOTAL_COV=$(go tool cover -func=c.out | awk '/^total:/ {print $3}' | tr -d '%')
          echo "CODE_COVERAGE_OUTPUT=Line coverage is $TOTAL_COV%" >> $GITHUB_ENV

      - name: Extract test summary
        if: ${{ always() }}
        run: |
          {
            echo '```'
            # grab total runs/passes/fails/skips from the log
            grep -E '=== RUN|--- PASS|--- FAIL|--- SKIP|coverage:' test_output.log
            echo '```'
          } > test_summary.md

      - name: Set TEST_SUMMARY output
        id: summary
        run: |
          echo "TEST_SUMMARY<<EOF" >> "$GITHUB_OUTPUT"
          cat test_summary.md >> "$GITHUB_OUTPUT"
          echo "EOF" >> "$GITHUB_OUTPUT"

      - name: Update triggering comment with summary
        uses: peter-evans/create-or-update-comment@v1
        if: ${{ always() }}
        with:
          comment-id: ${{ github.event.client_payload.github.payload.comment.id }}
          body: |
            > **Acceptance Tests**: `${{ job.status }}`
            > **üìå [View full run](https://github.com/${{ github.repository }}/actions/runs/${{ github.run_id }})`
            >
            > **Coverage**: ${{ env.CODE_COVERAGE_OUTPUT }}

            <TEST SUMMARY HERE>
            ${{ steps.summary.outputs.TEST_SUMMARY }}
          reaction-type: hooray

      - name: Complete custom check run
        if: ${{ always() }}
        uses: actions/github-script@v5
        with:
          github-token: ${{ secrets.GITHUB_TOKEN }}
          script: |
            const conclusion = '${{ job.status }}';
            await github.rest.checks.update({
              ...context.repo,
              check_run_id: Number('${{ steps.create-check.outputs.check_run_id }}'),
              status: 'completed',
              conclusion,
              output: {
                title: `Acceptance Tests ${conclusion.toUpperCase()}`,
                summary: `Coverage: ${{ env.CODE_COVERAGE_OUTPUT }}\n\nSee details: https://github.com/${{ github.repository }}/actions/runs/${{ github.run_id }}`
              }
            });

      - name: Done
        run: echo "üçè Job status is ${{ job.status }}."
