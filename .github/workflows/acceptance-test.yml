name: Acceptance Test cases
on:
  pull_request:
  repository_dispatch:
    types: [ok-to-test-command]
jobs:
  Acceptance-Tests:
    runs-on: self-hosted
    if: github.event_name == 'repository_dispatch'
    steps:
      - name: Trigger Event
        run: |
          echo "üéâ The job was automatically triggered by a ${{ github.event_name }} event."

      - name: Runner Info
        run: |
          echo "üêß This job is now running on runner: $RUNNER_NAME (OS: ${{ runner.os }})"

      - name: Pull Request Info
        run: |
          echo "your repository is ${{ github.repository }}."
          echo "PR Number: ${{ github.event.client_payload.pull_request.number }}"
          echo "Branch Name: ${{ github.event.client_payload.pull_request.head.ref }}"

      - name: Check out repository code
        uses: actions/checkout@v4
        with:
          ref: "refs/pull/${{ github.event.client_payload.pull_request.number }}/merge"

      - name: Remove Cached Go Versions
        run: |
          sudo rm -rf /home/ubuntu/actions-runner/_work/_tool/go
          sudo rm -rf /usr/local/go
          sudo apt remove --purge golang -y
          hash -r  # Clear shell path cache

      - name: Set up Go
        uses: actions/setup-go@v5
        with:
          go-version: "1.20"
          check-latest: true # Ensures the latest patch of Go 1.20 is installed
          cache: true # Enables module caching

      - name: Verify Go Installation
        run: |
          go version
          which go

      - name: Set Go Environment
        run: |
          echo "GOPATH=$HOME/go" >> $GITHUB_ENV
          echo "PATH=$HOME/go/bin:$PATH" >> $GITHUB_ENV

      - name: Cache Go Modules
        uses: actions/cache@v3
        with:
          path: |
            ~/go/pkg/mod
          key: go-mod-${{ runner.os }}-${{ hashFiles('**/go.sum') }}
          restore-keys: |
            go-mod-${{ runner.os }}-

      - name: Install Dependencies
        run: |
          go mod tidy
          go mod vendor

      - name: Install unzip and sshpass and curl
        run: |
          sudo apt update && sudo apt upgrade -y
          sudo apt install unzip sshpass curl -y
          curl "https://awscli.amazonaws.com/awscli-exe-linux-x86_64.zip" -o "awscliv2.zip"
          unzip awscliv2.zip
          sudo ./aws/install
          aws --version

      - name: Setup Terraform v1.10.5
        run: |
          set -e  # Exit on error
          TERRAFORM_VERSION="1.10.5"
          curl -fsSL -o terraform.zip "https://releases.hashicorp.com/terraform/${TERRAFORM_VERSION}/terraform_${TERRAFORM_VERSION}_linux_amd64.zip"

          if [ ! -f terraform.zip ]; then
            echo "Terraform zip file not found!"
            exit 1
          fi
          unzip terraform.zip
          sudo mv terraform /usr/local/bin/
          rm terraform.zip  # Cleanup
          echo "‚úÖ Terraform Installed Successfully!"
          terraform version

      - name: Set environment variables
        run: |
          echo "NUTANIX_PE_PASSWORD=${{ secrets.NUTANIX_PE_PASSWORD }}" >> $GITHUB_ENV
          echo "NUTANIX_PE_USERNAME=${{ secrets.NUTANIX_PE_USERNAME }}" >> $GITHUB_ENV
          echo "NUTANIX_USERNAME=${{ secrets.NUTANIX_USERNAME }}" >> $GITHUB_ENV
          echo "NUTANIX_PASSWORD=${{ secrets.NUTANIX_PASSWORD }}" >> $GITHUB_ENV
          echo "NUTANIX_INSECURE=${{ secrets.NUTANIX_INSECURE }}" >> $GITHUB_ENV
          echo "NUTANIX_PORT=${{ secrets.NUTANIX_PORT }}" >> $GITHUB_ENV
          echo "NUTANIX_ENDPOINT=${{ secrets.NUTANIX_ENDPOINT }}" >> $GITHUB_ENV
          echo "NUTANIX_STORAGE_CONTAINER=${{ secrets.NUTANIX_STORAGE_CONTAINER }}" >> $GITHUB_ENV
          echo "FOUNDATION_ENDPOINT=${{ secrets.FOUNDATION_ENDPOINT }}" >> $GITHUB_ENV
          echo "FOUNDATION_PORT=${{ secrets.FOUNDATION_PORT }}" >> $GITHUB_ENV
          echo "NOS_IMAGE_TEST_URL=${{ secrets.NOS_IMAGE_TEST_URL }}" >> $GITHUB_ENV
          echo "NDB_ENDPOINT=${{ secrets.NDB_ENDPOINT }}" >> $GITHUB_ENV
          echo "NDB_PASSWORD=${{ secrets.NDB_PASSWORD }}" >> $GITHUB_ENV
          echo "NDB_USERNAME=${{ secrets.NDB_USERNAME }}" >> $GITHUB_ENV
          echo "PROTECTION_RULES_TEST_FLAG=${{ secrets.PROTECTION_RULES_TEST_FLAG }}" >> $GITHUB_ENV
          echo "CGO_ENABLED=${{ secrets.CGO_ENABLED }}" >> $GITHUB_ENV

      - name: Check gofmt
        run: |
          echo "==> Checking that code complies with gofmt requirements..."
          gofmt_files=$(gofmt -l `find . -name '*.go' | grep -v vendor`)
          if [[ -n ${gofmt_files} ]]; then
              echo 'gofmt needs running on the following files:'
              echo "${gofmt_files}"
              echo "You can use the command: \`make fmt\` to reformat code."
              exit 1
          else
              echo "No gofmt issues found."
          fi
        continue-on-error: true

      - name: Acceptance test cases
        id: test-execution
        run: |
          echo "tests_executed=tests_execution_not_successful" >> $GITHUB_OUTPUT
          args="${{ github.event.client_payload.slash_command.args }}"
          providers=(${args})
          index=0
          n=${#providers[@]}
          runFlag=""
          for provider in $args
          do
              if [ "$provider" = "foundation" ]
                  then
                      runFlag+="TestAccFoundation*"
              elif [ "$provider" = "foundation_central" ]
                  then
                      runFlag+="TestAccFC*"
              elif [ "$provider" = "karbon" ]
                  then
                      runFlag+="TestAccKarbon*"
              elif [ "$provider" = "v3" ]
                  then
                      runFlag+="TestAccNutanix*"
              elif [ "$provider" = "v4" ]
                  then
                      runFlag+="TestAccV2Nutanix*"
              elif [ "$provider" = "lcm" ]
                  then
                      runFlag+="TestAccV2NutanixLcm*"
              elif [ "$provider" = "era" ]
                  then
                      runFlag+="TestAccEra*"
              else
                  echo "running individual testcase/package"
                  runFlag+="$provider"
              fi
              if [ $index -lt $((n-1)) ]
                  then
                      runFlag+="|"
              fi
              index=$((index+1))
          done
          export TESTARGS="-run=${runFlag}"
          echo "TESTARGS = $TESTARGS"
          echo "==> Setup Foundation Config"
          echo '${{ secrets.FOUNDATION_CONFIG }}' > test_foundation_config.json
          echo "==> Setup PC Config"
          echo '${{ secrets.PC_CONFIG }}' > test_config.json
          echo "==> Setup V4 Config"
          echo '${{ secrets.V4_CONFIG }}' > test_config_v2.json
          echo "==> Running testcases..."
          TF_LOG="ERROR" TF_ACC=1  GOTRACEBACK=all go test ./... -v ${TESTARGS} -timeout 500m -coverprofile c.out -covermode=count | tee test_output.log

          set +e  # Ignore failures

          # Ensure log file exists
          if [ ! -f test_output.log ]; then
              echo "Error: test_output.log not found!"
              exit 1  # Ignore missing file instead of failing
          fi

          # Extract total test cases executed safely
          TOTAL_RUN=$(grep -c '^=== RUN' test_output.log)
          if [ "$TOTAL_RUN" -eq 0 ]; then
              echo "No test cases executed. Exiting..."
              exit 1
          fi

          # Extract counts of passed, failed, and skipped tests
          TOTAL_PASSED=$(grep -c '^--- PASS' test_output.log)
          TOTAL_FAILED=$(grep -c '^--- FAIL' test_output.log)
          TOTAL_SKIPPED=$(grep -c '^--- SKIP' test_output.log)

          # Set output as successful for GitHub Actions which will be used in subsequent steps, Set only if tests were executed
          echo "tests_executed=tests_execution_successful" >> $GITHUB_OUTPUT

          # Calculate percentages safely
          PASS_PERCENT=0
          FAIL_PERCENT=0
          SKIP_PERCENT=0
          if [ "$TOTAL_RUN" -gt 0 ]; then
              if [ "$TOTAL_PASSED" -gt 0 ]; then
                  PASS_PERCENT=$((TOTAL_PASSED * 100 / TOTAL_RUN))
              fi
              if [ "$TOTAL_FAILED" -gt 0 ]; then
                  FAIL_PERCENT=$((TOTAL_FAILED * 100 / TOTAL_RUN))
              fi
              if [ "$TOTAL_SKIPPED" -gt 0 ]; then
                  SKIP_PERCENT=$((TOTAL_SKIPPED * 100 / TOTAL_RUN))
              fi
          fi

          # Write summary to a file
          {
            echo "==================================================üß™ TEST SUMMARY üß™================================================================================="
            echo "Total Test Cases Run üöÄ: $TOTAL_RUN"
            echo "Total Test Cases Passed ‚úÖ: $TOTAL_PASSED ($PASS_PERCENT %)"
            echo "Total Test Cases Failed ‚ùå: $TOTAL_FAILED ($FAIL_PERCENT %)"
            echo "Total Test Cases Skipped ‚ö†Ô∏è: $TOTAL_SKIPPED ($SKIP_PERCENT %)"
            echo "=================================================================================================================================================="
            echo ""
            echo "================================================== TESTS SUCCEEDED ‚úÖ ============================================================================="
            if [ "$TOTAL_PASSED" -gt 0 ]; then
                echo ""
                grep '^--- PASS' test_output.log | awk '{print "‚úÖ " $3}' || true
            else
                echo "No tests passed üòû‚ùó"
            fi
            echo "==================================================================================================================================================="
            echo ""
            echo "================================================== TESTS FAILED ‚ùå ================================================================================"
            if [ "$TOTAL_FAILED" -gt 0 ]; then
                echo ""
                grep '^--- FAIL' test_output.log | awk '{print "‚ùå " $3}' || true
            else
                echo "üéâüíÉ No tests failed üï∫üéâ"
            fi
            echo "==================================================================================================================================================="
            echo ""
            echo "================================================== TESTS SKIPPED ‚ö†Ô∏è =============================================================================="
            if [ "$TOTAL_SKIPPED" -gt 0 ]; then
                awk '
                  /^=== RUN/ { testname=$3; reason="No reason provided" }
                  /--- SKIP/ { print "‚ö†Ô∏è " testname "   : Reason: ‚û°Ô∏è :  " reason }
                  /^[[:space:]]+/ { reason=$0 }' test_output.log || true
            else
                echo "üéâüíÉ No tests skipped üï∫üéâ"
            fi
            echo "==================================================================================================================================================="
            echo ""

          } > test_summary.txt
          echo "TEST_SUMMARY_FILE=test_summary.txt" >> $GITHUB_ENV

          # Write to GitHub output for PR comment
          {
            echo "summary_content<<EOF"
            cat test_summary.txt
            echo "EOF"
          } >> "$GITHUB_OUTPUT"


          if [ "$TOTAL_FAILED" -gt 0 ]; then
              echo ""
              echo "================== FAILURE DETAILS OF TESTCASES EXECUTED ==============================================================================================="
              grep '^=== RUN' test_output.log | awk '{print $3}' | while read -r test; do
                  if grep -q "^--- FAIL: $test" test_output.log; then
                      echo "TESTCASE: $test"
                      echo "========================================üî•üî•üî•üî•üìù TRACEBACK üìùüî•üî•üî•üî• ======================================================================================="
                      awk "/=== RUN   $test/,/--- FAIL: $test/" test_output.log | sed 's/^/    /' || true
                      echo "==========================================================================================================================================================="
                      echo ""
                  fi
              done
          fi

          echo "Tests Execution is done, please debug if any failures"

          # üîÅ This now ensures the stage fails if tests fail
          if [ "$TOTAL_FAILED" -gt 0 ]; then
              echo "Making the stage fail due to test failures."
              exit 1
          else
              exit 0
          fi

      # Code Coverage Check only if tests executed successfully
      - name: Code Coverage Check
        if: ${{ always() && steps.test-execution.outputs.tests_executed == 'tests_execution_successful' }}
        run: |
          echo "Code coverage: Checking if code coverage is above threshold..."
          export TESTCOV_THRESHOLD=50
          echo "Threshold: $TESTCOV_THRESHOLD %"
          totalCoverage=`go tool cover -func=c.out | grep total | grep -Eo '[0-9]+\.[0-9]+'`
          echo "Current test coverage : $totalCoverage %"
          if (( $(echo "$totalCoverage $TESTCOV_THRESHOLD" | awk '{print ($1 > $2)}') )); then
              echo "CODE_COVERAGE_OUTPUT=Line code coverage is $totalCoverage" >> $GITHUB_ENV
              echo "Line coverage is $totalCoverage"
          else
              echo "CODE_COVERAGE_OUTPUT=Current line coverage ($totalCoverage) is below threshold ($TESTCOV_THRESHOLD). Kindly add more acceptance tests." >> $GITHUB_ENV
              echo "Current coverage ($totalCoverage) is below threshold ($TESTCOV_THRESHOLD)."
          fi

      # Post build status along with test summary as a comment only if tests executed successfully
      - name: Post build status and test summary
        if: ${{ always() && steps.test-execution.outputs.tests_executed == 'tests_execution_successful' }}
        uses: peter-evans/create-or-update-comment@v4
        with:
          comment-id: ${{ github.event.client_payload.github.payload.comment.id }}
          body: |
            - üß™ **`Build Status: `** `${{ job.status }}`
            - üìå **`GitHub Action: `** [View GitHub Actions Run](https://github.com/${{ github.repository }}/actions/runs/${{ github.run_id }})
            - üìä **`Code Coverage: `** `${{ env.CODE_COVERAGE_OUTPUT }}`
            - üìù **`Test Summary: `**
            ```txt
            ${{ steps.test-execution.outputs.summary_content }}
            ```
          reaction-type: hooray

      # Post only Build Status and workflow info as Comment if tests execution is not successful
      - name: Post build status and workflow info
        if: ${{ always() && (steps.test-execution.outputs.tests_executed == 'tests_execution_not_successful' || !steps.test-execution.outputs.tests_executed) }}
        uses: peter-evans/create-or-update-comment@v4
        with:
          comment-id: ${{ github.event.client_payload.github.payload.comment.id }}
          body: |
            - üß™ **`Build Status: `** `${{ job.status }}`
            - üìå **`GitHub Action: `** [View GitHub Actions Run](https://github.com/${{ github.repository }}/actions/runs/${{ github.run_id }})
            - ‚ÑπÔ∏è **`Tests were not successfully executed, so no summary is available.`**

          reaction-type: confused

      # Print job status
      - name: Workflow Status
        if: ${{ always() }}
        run: |
          STATUS="${{ job.status }}"
          if [ "$STATUS" == "failure" ]; then
            echo "Job Status: $STATUS üò¢"
          else
            echo "Job Status: $STATUS ‚úÖ"
          fi

      - name: Debugging Information
        if: always()
        env:
          TESTS_EXECUTED: ${{ steps.test-execution.outputs.tests_executed }}
        run: |
          echo "Debugging information:"
          echo "tests_executed: $TESTS_EXECUTED"

          echo "GITHUB_ENV content:"
          cat "$GITHUB_ENV"

          echo "GITHUB_OUTPUT content:"
          cat "$GITHUB_OUTPUT" || echo "GITHUB_OUTPUT not found"

          echo "Test summary file content:"
          cat test_summary.txt || echo "No test summary file found."
