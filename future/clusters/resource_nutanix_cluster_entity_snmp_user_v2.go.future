package clusters

import (
	"context"
	"github.com/terraform-providers/terraform-provider-nutanix/nutanix/services/clustersv2"

	"github.com/hashicorp/terraform-plugin-sdk/v2/diag"
	"github.com/hashicorp/terraform-plugin-sdk/v2/helper/resource"
	"github.com/hashicorp/terraform-plugin-sdk/v2/helper/schema"
	"github.com/nutanix/ntnx-api-golang-clients/clustermgmt-go-client/v4/models/clustermgmt/v4/config"
	import2 "github.com/nutanix/ntnx-api-golang-clients/prism-go-client/v4/models/prism/v4/config"
	import1 "github.com/nutanix/ntnx-api-golang-clients/vmm-go-client/v4/models/prism/v4/config"
	conns "github.com/terraform-providers/terraform-provider-nutanix/nutanix"
	"github.com/terraform-providers/terraform-provider-nutanix/utils"
)

func ResourceNutanixClusterSNMPUserV2() *schema.Resource {
	return &schema.Resource{
		CreateContext: ResourceNutanixClusterSNMPUserV2Create,
		ReadContext:   ResourceNutanixClusterSNMPUserV2Read,
		UpdateContext: ResourceNutanixClusterSNMPUserV2Update,
		DeleteContext: ResourceNutanixClusterSNMPUserV2Delete,
		Schema: map[string]*schema.Schema{
			"cluster_ext_id": {
				Type:     schema.TypeString,
				Optional: true,
				Computed: true,
			},
			"ext_id": {
				Type:     schema.TypeString,
				Optional: true,
				Computed: true,
			},
			"username": {
				Type:     schema.TypeString,
				Optional: true,
				Computed: true,
			},
			"auth_type": {
				Type:     schema.TypeString,
				Optional: true,
				Computed: true,
			},
			"auth_key": {
				Type:     schema.TypeString,
				Optional: true,
				Computed: true,
			},
			"priv_type": {
				Type:     schema.TypeString,
				Optional: true,
				Computed: true,
			},
			"priv_key": {
				Type:     schema.TypeString,
				Optional: true,
				Computed: true,
			},
		},
	}
}

func ResourceNutanixClusterSNMPUserV2Create(ctx context.Context, d *schema.ResourceData, meta interface{}) diag.Diagnostics {
	conn := meta.(*conns.Client).ClusterAPI
	body := &config.SnmpUser{}
	clusterExtID := d.Get("cluster_ext_id")

	if extID, ok := d.GetOk("ext_id"); ok {
		body.ExtId = utils.StringPtr(extID.(string))
	}
	if userName, ok := d.GetOk("username"); ok {
		body.Username = utils.StringPtr(userName.(string))
	}
	if authType, ok := d.GetOk("authType"); ok {
		subMap := map[string]interface{}{
			"MD5": 2,
			"SHA": 3,
		}
		pVal := subMap[authType.(string)]
		p := config.SnmpAuthType(pVal.(int))
		body.AuthType = &p
	}
	if authKey, ok := d.GetOk("authKey"); ok {
		body.AuthKey = utils.StringPtr(authKey.(string))
	}
	if privType, ok := d.GetOk("privType"); ok {
		subMap := map[string]interface{}{
			"DES": 2,
			"AES": 3,
		}
		pVal := subMap[privType.(string)]
		p := config.SnmpPrivType(pVal.(int))
		body.PrivType = &p
	}
	if privKey, ok := d.GetOk("privKey"); ok {
		body.PrivKey = utils.StringPtr(privKey.(string))
	}

	resp, err := conn.ClusterEntityAPI.CreateSnmpUser(utils.StringPtr(clusterExtID.(string)), body)
	if err != nil {
		return diag.Errorf("error while creating SNMP Users : %v", err)
	}

	TaskRef := resp.Data.GetValue().(import1.TaskReference)
	taskUUID := TaskRef.ExtId

	taskconn := meta.(*conns.Client).PrismAPI
	// Wait for the SNMP User to be available
	stateConf := &resource.StateChangeConf{
		Pending: []string{"QUEUED", "RUNNING"},
		Target:  []string{"SUCCEEDED"},
		Refresh: clustersv2.taskStateRefreshPrismTaskGroupFunc(ctx, taskconn, utils.StringValue(taskUUID)),
		Timeout: d.Timeout(schema.TimeoutCreate),
	}

	if _, errWaitTask := stateConf.WaitForStateContext(ctx); errWaitTask != nil {
		return diag.Errorf("error waiting for SNMP User (%s) to create: %s", utils.StringValue(taskUUID), errWaitTask)
	}

	// Get UUID from TASK API

	resourceUUID, err := taskconn.TaskRefAPI.GetTaskById(taskUUID, nil)
	if err != nil {
		return diag.Errorf("error while fetching SNMP User UUID : %v", err)
	}
	rUUID := resourceUUID.Data.GetValue().(import2.Task)

	uuid := rUUID.EntitiesAffected[0].ExtId
	d.SetId(*uuid)
	return ResourceNutanixClusterSNMPUserV2Read(ctx, d, meta)
}

func ResourceNutanixClusterSNMPUserV2Read(ctx context.Context, d *schema.ResourceData, meta interface{}) diag.Diagnostics {
	conn := meta.(*conns.Client).ClusterAPI
	clusterExtID := d.Get("cluster_ext_id")

	resp, err := conn.ClusterEntityAPI.GetSnmpUserById(utils.StringPtr(clusterExtID.(string)), utils.StringPtr(d.Id()))
	if err != nil {
		return diag.Errorf("error while fetching SNMP User : %v", err)
	}

	getResp := resp.Data.GetValue().(config.SnmpUser)

	if err := d.Set("tenant_id", getResp.TenantId); err != nil {
		return diag.FromErr(err)
	}
	if err := d.Set("links", clustersv2.flattenLinks(getResp.Links)); err != nil {
		return diag.FromErr(err)
	}
	if err := d.Set("username", getResp.Username); err != nil {
		return diag.FromErr(err)
	}
	if err := d.Set("auth_type", flattenAuthType(getResp.AuthType)); err != nil {
		return diag.FromErr(err)
	}
	if err := d.Set("auth_key", getResp.AuthKey); err != nil {
		return diag.FromErr(err)
	}
	if err := d.Set("priv_type", flattenPrivType(getResp.PrivType)); err != nil {
		return diag.FromErr(err)
	}
	if err := d.Set("priv_key", getResp.PrivKey); err != nil {
		return diag.FromErr(err)
	}
	return nil
}

func ResourceNutanixClusterSNMPUserV2Update(ctx context.Context, d *schema.ResourceData, meta interface{}) diag.Diagnostics {
	conn := meta.(*conns.Client).ClusterAPI
	clusterExtID := d.Get("cluster_ext_id")

	resp, err := conn.ClusterEntityAPI.GetSnmpUserById(utils.StringPtr(clusterExtID.(string)), utils.StringPtr(d.Id()))
	if err != nil {
		return diag.Errorf("error while fetching SNMP User : %v", err)
	}

	respSNMPUser := resp.Data.GetValue().(config.SnmpUser)
	updateSpec := respSNMPUser

	if d.HasChange("username") {
		updateSpec.Username = utils.StringPtr(d.Get("username").(string))
	}
	if d.HasChange("authType") {
		subMap := map[string]interface{}{
			"MD5": 2,
			"SHA": 3,
		}
		pVal := subMap[d.Get("authType").(string)]
		p := config.SnmpAuthType(pVal.(int))
		updateSpec.AuthType = &p
	}
	if d.HasChange("authKey") {
		updateSpec.AuthKey = utils.StringPtr(d.Get("authKey").(string))
	}
	if d.HasChange("privType") {
		subMap := map[string]interface{}{
			"DES": 2,
			"AES": 3,
		}
		pVal := subMap[d.Get("privType").(string)]
		p := config.SnmpPrivType(pVal.(int))
		updateSpec.PrivType = &p
	}
	if d.HasChange("privKey") {
		updateSpec.PrivKey = utils.StringPtr(d.Get("privKey").(string))
	}

	updateResp, err := conn.ClusterEntityAPI.UpdateSnmpUserById(utils.StringPtr(clusterExtID.(string)), utils.StringPtr(d.Id()), &updateSpec)
	if err != nil {
		return diag.Errorf("error while updating SNMP Users : %v", err)
	}

	TaskRef := updateResp.Data.GetValue().(import1.TaskReference)
	taskUUID := TaskRef.ExtId

	taskconn := meta.(*conns.Client).PrismAPI
	// Wait for the SNMP User to be available
	stateConf := &resource.StateChangeConf{
		Pending: []string{"QUEUED", "RUNNING"},
		Target:  []string{"SUCCEEDED"},
		Refresh: clustersv2.taskStateRefreshPrismTaskGroupFunc(ctx, taskconn, utils.StringValue(taskUUID)),
		Timeout: d.Timeout(schema.TimeoutCreate),
	}

	if _, errWaitTask := stateConf.WaitForStateContext(ctx); errWaitTask != nil {
		return diag.Errorf("error waiting for SNMP User (%s) to update: %s", utils.StringValue(taskUUID), errWaitTask)
	}

	return ResourceNutanixClusterSNMPUserV2Read(ctx, d, meta)
}

func ResourceNutanixClusterSNMPUserV2Delete(ctx context.Context, d *schema.ResourceData, meta interface{}) diag.Diagnostics {
	conn := meta.(*conns.Client).ClusterAPI
	clusterExtID := d.Get("cluster_ext_id")

	readResp, err := conn.ClusterEntityAPI.GetSnmpUserById(utils.StringPtr(clusterExtID.(string)), utils.StringPtr(d.Id()))
	if err != nil {
		return diag.Errorf("error while reading SNMP User : %v", err)
	}
	// Extract E-Tag Header
	args := clustersv2.getEtagHeader(readResp, conn)

	const runPrechecksOnly = false

	resp, err := conn.ClusterEntityAPI.DeleteSnmpUserById(utils.StringPtr(clusterExtID.(string)), utils.StringPtr(d.Id()), args)
	if err != nil {
		return diag.Errorf("error while deleting SNMP User : %v", err)
	}
	TaskRef := resp.Data.GetValue().(import1.TaskReference)
	taskUUID := TaskRef.ExtId

	// calling group API to poll for completion of task

	taskconn := meta.(*conns.Client).PrismAPI
	// Wait for the SNMP User to be available
	stateConf := &resource.StateChangeConf{
		Pending: []string{"QUEUED", "RUNNING"},
		Target:  []string{"SUCCEEDED"},
		Refresh: clustersv2.taskStateRefreshPrismTaskGroupFunc(ctx, taskconn, utils.StringValue(taskUUID)),
		Timeout: d.Timeout(schema.TimeoutCreate),
	}

	if _, errWaitTask := stateConf.WaitForStateContext(ctx); errWaitTask != nil {
		return diag.Errorf("error waiting for SNMP User (%s) to delete: %s", utils.StringValue(taskUUID), errWaitTask)
	}
	return nil
}
